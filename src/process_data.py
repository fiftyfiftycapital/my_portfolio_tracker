# src/process_data.py
import re
from datetime import datetime

def preformat(text):
    """Preformat the text by translating Polish month names to English."""
    polish_to_english_months = {
        'stycznia': 'January',
        'lutego': 'February',
        'marca': 'March',
        'kwietnia': 'April',
        'maja': 'May',
        'czerwca': 'June',
        'lipca': 'July',
        'sierpnia': 'August',
        'września': 'September',
        'października': 'October',
        'listopada': 'November',
        'grudnia': 'December'
    }
    for pl, en in polish_to_english_months.items():
        text = re.sub(r'\b' + re.escape(pl) + r'\b', en, text, flags=re.IGNORECASE)
    return text

def load_data(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        text = file.read()
    formatted_text = preformat(text)
    return parse_data(formatted_text)

def parse_data(text):
    entries = []
    for entry in re.split(r'\n\n+', text):
        if entry.strip():
            date_pattern = r'(?:Generated by Trading 212 UK Ltd. on |Wygenerowane przez Trading 212 UK Ltd. )(\d{1,2}\s\w+\s\d{4})(?: at| o) (\d{2}:\d{2}) \(UTC\).'
            date_match = re.search(date_pattern, entry, re.IGNORECASE)
            if date_match:
                date_str = f"{date_match.group(1)} {date_match.group(2)}"
                date = datetime.strptime(date_str, "%d %B %Y %H:%M").strftime("%Y-%m-%d")
                
                entry_data = {
                    'Date': date,
                    'Deposit': '0.00',
                    'Withdrawal': '0.00',
                    'Realized_P/L': '0.00',
                    'Unrealized_P/L': '0.00',
                    'Dividends': '0.00',
                    'Overnight_Fee': '0.00',
                    'Account_Value': '0.00'
                }
                
                # Extract financial data, handling the number format correctly
                for key, pattern in {
                    'Deposit': r'(?:Deposits|Wpłat) PLN (-?\d+(?:,\d+)?(?:.\d+)?)',
                    'Withdrawal': r'(?:Withdrawals|Wypłaty) PLN (-?\d+(?:,\d+)?(?:.\d+)?)',
                    'Realized_P/L': r'(?:Realised P/L|Zrealizowane zyski/straty) PLN (-?\d+(?:,\d+)?(?:.\d+)?)',
                    'Unrealized_P/L': r'(?:Unrealised P/L|Niezrealizowane zyski i straty) PLN (-?\d+(?:,\d+)?(?:.\d+)?)',
                    'Dividends': r'(?:Dividends|Dywidendy) PLN (-?\d+(?:,\d+)?(?:.\d+)?)',
                    'Overnight_Fee': r'(?:Odsetki „overnight”|Overnight interest|Opłata „overnight” za utrzymanie pozycji) PLN (-?\d+(?:,\d+)?(?:.\d+)?)',
                    'Account_Value': r'(?:Account value|Wartość konta ogółem) PLN (\d+(?:,\d+)?(?:.\d+)?)'
                }.items():
                    match = re.search(pattern, entry)
                    if match:
                        # Replace comma with nothing, then period with comma for correct float conversion
                        value = match.group(1).replace(',', '').replace('.', ',')
                        # Convert string to float, then back to string with . as decimal separator
                        entry_data[key] = format(float(value.replace(',', '.')), '.2f')
                
                entries.append(entry_data)
    return entries