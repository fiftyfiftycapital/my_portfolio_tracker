import pdfplumber
import os
from datetime import datetime

def process_pdf_statement(pdf_path, csv_path):
    """Process PDF statement and append data to CSV file"""
    
    # Extract text from PDF
    with pdfplumber.open(pdf_path) as pdf:
        text = ""
        for page in pdf.pages:
            extracted_text = page.extract_text()
            text += extracted_text
            # Debug print to see what we're getting from the PDF
            print("\nExtracted text from PDF:")
            print("-" * 50)
            print(extracted_text)
            print("-" * 50)

    # Parse the required data
    lines = text.split('\n')
    current_block = []
    statement_found = False
    last_values = {}
    
    for line in lines:
        line = line.strip()
        
        if line.startswith('Generated by Trading 212'):
            statement_found = True
            current_block = [line]
            continue
            
        if statement_found and 'PLN' in line:
            # Clean up the line and handle any embedded numbers
            parts = line.split('PLN')
            key_part = parts[0].strip()
            # Take only the last word if there are multiple words before PLN
            key = key_part.split()[-1] if len(key_part.split()) > 1 else key_part
            # Take only the first number after PLN
            value = parts[1].strip().split()[0]
            cleaned_line = f"{key} PLN {value}"
            
            # Store the last value for each field type
            if 'Deposits' in cleaned_line:
                last_values['Deposits'] = cleaned_line
            elif 'Withdrawals' in cleaned_line:
                last_values['Withdrawals'] = cleaned_line
            elif 'Realised P/L' in cleaned_line:
                last_values['Realised P/L'] = cleaned_line
            elif 'Unrealised P/L' in cleaned_line:
                last_values['Unrealised P/L'] = cleaned_line
            elif 'Dividends' in cleaned_line:
                last_values['Dividends'] = cleaned_line
            elif 'Overnight interest' in cleaned_line:
                last_values['Overnight interest'] = cleaned_line
            elif 'Account value' in cleaned_line:
                last_values['Account value'] = cleaned_line

    # Format the final block using the last values
    if statement_found:
        formatted_block = [current_block[0]]  # Start with the header
        for field in ['Deposits', 'Withdrawals', 'Realised P/L', 'Unrealised P/L', 
                     'Dividends', 'Overnight interest', 'Account value']:
            if field in last_values:
                formatted_block.append(last_values[field])
        
        # Append to CSV file
        formatted_text = '\n'.join(formatted_block) + '\n\n'
        with open(csv_path, 'a') as f:
            f.write(formatted_text)
    
    print(f"Successfully processed {pdf_path} and appended data to {csv_path}")

if __name__ == "__main__":
    pdf_path = "data/ActivityStatement5805600-2025-03-07.pdf"
    csv_path = "data/brokerage_data1.csv"
    
    if not os.path.exists(pdf_path):
        print(f"Error: PDF file not found: {pdf_path}")
    else:
        process_pdf_statement(pdf_path, csv_path)